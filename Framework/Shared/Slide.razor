@inherits SlideBase
@inject IJSRuntime JSRuntime


@using Framework.Slides.JsonClasses

@namespace Framework.Slides


<img id="bg-img" src="@SlideData.Image" alt="ry namako rehetra">
<svg id="svg" viewBox="0,0, 1620,1080">
	@* *Added Null supression *@
	@foreach (var buttonKey in SlideData.Buttons!.Keys.ToList())
	{
		if (GameState.GetState($"{SlideId}.{buttonKey}")) {

			var ButtonElement = SlideData.Buttons[buttonKey];
			// Declare here as it's used in several cases
			// points is null if button-type is preset so if it's a preset, 
			// make it empty list so that it hasn't to be nullable => no null warnings
			var PointsList = ButtonElement.Type != "preset" ? ButtonElement.Points.Split(',') : [];

			switch (ButtonElement.Type) {
				case "polygon":
					<polygon 
						id="@buttonKey"
						class="selectable-svg-element"
						fill=@fillColor
						points="@ButtonElement.Points" 
						@onclick="async () => { await HandleButtonClick(ButtonElement);}" 
					/>
					break;
				case "image":
					<image 
						id=@buttonKey
						x=@PointsList[0]
						y=@PointsList[1]
						width=@PointsList[2]
						height=@PointsList[3]
						href=@ButtonElement.Image
						@onclick="async () => { await HandleButtonClick(ButtonElement);}"
					/>
					break;
				case "rect":
					<rect
						id=@buttonKey
						class="selectable-svg-element"
						x=@PointsList[0]
						y=@PointsList[1]
						width=@PointsList[2]
						height=@PointsList[3]
						fill=@fillColor
						@onclick="async () => { await HandleButtonClick(ButtonElement);}"
					/>
					break;
				case "circle":
					<circle
						id=@buttonKey
						class="selectable-svg-element"
						cx=@PointsList[0]
						cy=@PointsList[1]
						r=@PointsList[2]
						fill=@fillColor
						@onclick="async () => { await HandleButtonClick(ButtonElement);}"
					/>
					break;
				case "preset":
					Dictionary<string, string> preset = [];
					switch (ButtonElement.Image) {
						case "left":
							preset = SlideService.PositionPresets["left"];
							break;
						case "right":
							preset = SlideService.PositionPresets["right"];
							break;
						case "top":
							preset = SlideService.PositionPresets["top"];
							break;
						case "bottom":
							preset = SlideService.PositionPresets["bottom"];
							break;
					}
					
					<rect
						id=@preset["id"]
						class="pos-preset"
						x=@preset["x"]
						y=@preset["y"]
						width=@preset["width"]
						height=@preset["height"]
						fill=@fillColor
						@onclick="async () => { await HandleButtonClick(ButtonElement);}"
					/>
					break;

			}
		}
	}
	@* 
	Arrow for pos-presets. By putting it here it will always exist and always be at the bottom
	This is important because of the css way I implement the arrow showing on hover with the pos-presets
	It needs to be after the pos-presets, and before, it was destroyed by a minigame
	*@
	<image
		id="arrow-img"
		href="UI_Images/arrows/left128q.png"
		alt="arrow"
		class="arrow-img"
		x="0"
		y="0"
		width="50"
	/>
</svg>

@code{ @* C# Code *@

	// https://imagemap.org/ 

}